# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from transmission.tenseal import tenseal_shapley_data_pb2 as transmission_dot_tenseal_dot_tenseal__shapley__data__pb2


class ShapleyServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.sum_shapley = channel.unary_unary(
                '/ShapleyService/sum_shapley',
                request_serializer=transmission_dot_tenseal_dot_tenseal__shapley__data__pb2.client_shapley_msg.SerializeToString,
                response_deserializer=transmission_dot_tenseal_dot_tenseal__shapley__data__pb2.top_k.FromString,
                )


class ShapleyServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def sum_shapley(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ShapleyServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'sum_shapley': grpc.unary_unary_rpc_method_handler(
                    servicer.sum_shapley,
                    request_deserializer=transmission_dot_tenseal_dot_tenseal__shapley__data__pb2.client_shapley_msg.FromString,
                    response_serializer=transmission_dot_tenseal_dot_tenseal__shapley__data__pb2.top_k.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ShapleyService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ShapleyService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def sum_shapley(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ShapleyService/sum_shapley',
            transmission_dot_tenseal_dot_tenseal__shapley__data__pb2.client_shapley_msg.SerializeToString,
            transmission_dot_tenseal_dot_tenseal__shapley__data__pb2.top_k.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
